
import { DUCFinalReport, SubDepot, Round, FailedRound, SegregatedParcel, MissingParcelDUCReportContext, CageReturnReport, LostPreventionReport, DailyMissortSummaryReport, Client, WeeklyMissingSummaryReport, TeamMember } from '../types';

export const generateDUCFinalReportEmail = (
  report: DUCFinalReport,
  subDepots: SubDepot[],
  rounds: Round[]
): { subject: string; body: string } => {
  const reportDateFormatted = new Date(report.date + 'T00:00:00Z').toLocaleDateString('en-GB', {
    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC'
  });
  const submittedAtFormatted = new Date(report.submitted_at).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit', timeZone: 'Europe/London' });

  const subject = `DUC Final Report Submitted – ${reportDateFormatted}`;

  let body = `
    <style>
      body { font-family: Arial, sans-serif; margin: 20px; color: #333; }
      h1 { color: #2a2a2a; border-bottom: 1px solid #eee; padding-bottom: 10px; }
      h2 { color: #333; margin-top: 30px; margin-bottom: 10px; border-bottom: 1px solid #eee; padding-bottom: 5px;}
      table { width: 100%; border-collapse: collapse; margin-bottom: 20px; font-size: 0.9em; }
      th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
      th { background-color: #f7f7f7; }
      .summary-item { margin-bottom: 10px; }
      .summary-label { font-weight: bold; }
      .footer { margin-top: 30px; font-size: 0.8em; color: #777; text-align: center; }
      ul { padding-left: 20px; }
      li { margin-bottom: 5px; }
    </style>
    <h1>DUC Final Report – ${reportDateFormatted}</h1>
    <p class="summary-item"><span class="summary-label">Submitted By:</span> ${report.submitted_by_name || report.submitted_by_team_member_id}</p>
    <p class="summary-item"><span class="summary-label">Submitted At:</span> ${submittedAtFormatted}</p>
  `;

  body += `<h2>Failed Rounds (${report.failed_rounds.length})</h2>`;
  if (report.failed_rounds.length > 0) {
    body += `<table><thead><tr><th>Round ID</th><th>Sub Depot</th><th>Comments</th></tr></thead><tbody>`;
    report.failed_rounds.forEach(fr => {
      const roundInfo = rounds.find(r => r.id === fr.round_id);
      const subDepotName = subDepots.find(sd => sd.id === fr.sub_depot_id)?.name || `Sub ${fr.sub_depot_id}`;
      body += `<tr><td>${fr.round_id} (Drop ${roundInfo?.drop_number || 'N/A'})</td><td>${subDepotName}</td><td>${fr.comments || 'N/A'}</td></tr>`;
    });
    body += `</tbody></table>`;
  } else { body += `<p>None</p>`; }

  body += `<h2>Total Returns (Edmonton DU)</h2><p>${report.total_returns} parcels</p>`;

  body += `<h2>Segregated Parcels Not Taken (${report.segregated_parcels.length})</h2>`;
  if (report.segregated_parcels.length > 0) {
    body += `<table><thead><tr><th>Barcode</th><th>Client</th><th>Count</th></tr></thead><tbody>`;
    report.segregated_parcels.forEach(sp => { body += `<tr><td>${sp.barcode}</td><td>${sp.client_name || sp.client_id}</td><td>${sp.count}</td></tr>`; });
    body += `</tbody></table>`;
  } else { body += `<p>None</p>`; }

  body += `<h2>Missing Parcels Summary</h2>`;
  const summary = report.missing_parcels_summary;
  body += `<p><span class="summary-label">Total Missing:</span> ${summary.total_missing}</p>`;
  body += `<p><span class="summary-label">Unrecovered:</span> ${summary.unrecovered}</p>`;
  body += `<p><span class="summary-label">Recovery Rate:</span> ${summary.recovery_rate}%</p>`;
  if (summary.parcels.length > 0) {
    body += `<h3>Details:</h3><ul>`;
    summary.parcels.forEach(p => {
      const roundInfo = rounds.find(r => r.id === p.round_id);
      const subDepotName = subDepots.find(sd => sd.id === p.sub_depot_id)?.name || `Sub ${p.sub_depot_id}`;
      const statusText = p.recovered ? '✅ Recovered' : '❌ Missing';
      body += `<li>${p.barcode} (Round ${p.round_id}, Courier ${p.courier_id}, Sub ${subDepotName}) – ${statusText}</li>`;
    });
    body += `</ul>`;
  }

  body += `<h2>Notes</h2><p>${report.notes || 'N/A'}</p>`;
  body += `<div class="footer">Generated by DUC Operations System</div>`;
  return { subject, body };
};

export const generateCageReturnReportEmail = (
  report: CageReturnReport,
  subDepots: SubDepot[]
): { subject: string; body: string } => {
  const reportDateFormatted = new Date(report.date + 'T00:00:00Z').toLocaleDateString('en-GB', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC' });
  const subDepotName = subDepots.find(sd => sd.id === report.sub_depot_id)?.name || `Sub Depot ${report.sub_depot_id}`;
  const subject = `Cage Return Report – ${subDepotName} – ${reportDateFormatted}`;

  let body = `
    <style> body { font-family: Arial, sans-serif; margin: 20px; color: #333; } h1, h2 { color: #2a2a2a; } table { width: 100%; border-collapse: collapse; margin-bottom: 20px; } th, td { border: 1px solid #ddd; padding: 8px; text-align: left; } th { background-color: #f7f7f7; } .footer { margin-top: 30px; font-size: 0.8em; color: #777; } </style>
    <h1>Cage Return Report</h1>
    <p><strong>Date:</strong> ${reportDateFormatted}</p>
    <p><strong>Sub-Depot:</strong> ${subDepotName}</p>
    <p><strong>Submitted By:</strong> ${report.submitted_by_name || report.submitted_by_team_member_id}</p>
    <p><strong>Submitted At:</strong> ${new Date(report.submitted_at).toLocaleString('en-GB')}</p>
    <h2>Non-Returned Cages (${report.non_returned_cages.length})</h2>
  `;
  if (report.non_returned_cages.length > 0) {
    body += `<table><thead><tr><th>Round ID</th><th>Courier Name</th><th>Courier ID</th></tr></thead><tbody>`;
    report.non_returned_cages.forEach(nrc => {
      body += `<tr><td>${nrc.round_id}</td><td>${nrc.courier_name || 'N/A'}</td><td>${nrc.courier_id}</td></tr>`;
    });
    body += `</tbody></table>`;
  } else {
    body += `<p>All cages returned for active rounds.</p>`;
  }
  if (report.notes) { body += `<h2>Notes</h2><p>${report.notes.replace(/\n/g, '<br>')}</p>`; }
  body += `<div class="footer">Generated by DUC Operations System</div>`;
  return { subject, body };
};

export const generateLostPreventionReportEmail = (
  report: LostPreventionReport
): { subject: string; body: string } => {
  const reportDateFormatted = new Date(report.date_of_incident + 'T00:00:00Z').toLocaleDateString('en-GB', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC' });
  const subject = `Lost Prevention Incident Report – ${report.courier_name || report.courier_id} – ${reportDateFormatted}`;
  let body = `
    <style> body { font-family: Arial, sans-serif; margin: 20px; color: #333; } h1, h2 { color: #2a2a2a; } .details p { margin: 5px 0; } .details strong { color: #555; } </style>
    <h1>Lost Prevention Incident Report</h1>
    <div class="details">
      <p><strong>Date of Incident:</strong> ${reportDateFormatted}</p>
      <p><strong>Submitted By:</strong> ${report.submitted_by_name || report.submitted_by_team_member_id}</p>
      <p><strong>Submitted At:</strong> ${new Date(report.submitted_at).toLocaleString('en-GB')}</p>
      <p><strong>Courier Involved:</strong> ${report.courier_name || report.courier_id} (ID: ${report.courier_id})</p>
      <p><strong>Round(s) Involved:</strong> ${report.round_ids.join(', ') || 'N/A'}</p>
      <h2>Incident Description</h2>
      <p>${report.incident_description.replace(/\n/g, '<br>')}</p>
      <h2>CCTV Review</h2>
      <p><strong>Viewed:</strong> ${report.cctv_viewed ? 'Yes' : 'No'}</p>
  `;
  if (report.cctv_viewed) { body += `<p><strong>Details:</strong> ${report.cctv_details?.replace(/\n/g, '<br>') || 'N/A'}</p>`; if(report.cctvFileName) body += `<p><strong>Attachment:</strong> ${report.cctvFileName}</p>`;}
  body += `<h2>Van Search</h2><p><strong>Conducted:</strong> ${report.van_search_conducted ? 'Yes' : 'No'}</p>`;
  if (report.van_search_conducted) { body += `<p><strong>Findings:</strong> ${report.van_search_findings?.replace(/\n/g, '<br>') || 'N/A'}</p>`; if(report.vanSearchFileName) body += `<p><strong>Attachment:</strong> ${report.vanSearchFileName}</p>`;}
  if (report.comments) { body += `<h2>Additional Comments/Actions</h2><p>${report.comments.replace(/\n/g, '<br>')}</p>`; }
  body += `</div><div class="footer" style="margin-top:30px; font-size:0.8em; color: #777;">Generated by DUC Operations System</div>`;
  return { subject, body };
};

export const generateDailyMissortSummaryEmail = (
  report: DailyMissortSummaryReport,
  subDepots: SubDepot[],
  clients: Client[],
  rounds: Round[]
): { subject: string; body: string } => {
  const reportDateFormatted = new Date(report.date + 'T00:00:00Z').toLocaleDateString('en-GB', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC' });
  const subDepotName = report.sub_depot_id ? (subDepots.find(sd => sd.id === report.sub_depot_id)?.name || `Sub Depot ${report.sub_depot_id}`) : 'All Sub-Depots';
  const subject = `Daily Missort Summary – ${subDepotName} – ${reportDateFormatted}`;

  let body = `
    <style> body { font-family: Arial, sans-serif; margin: 20px; color: #333; } h1, h2 { color: #2a2a2a; border-bottom: 1px solid #eee; padding-bottom: 5px; } table { width: 100%; max-width: 600px; border-collapse: collapse; margin-bottom: 20px; font-size: 0.9em; } th, td { border: 1px solid #ddd; padding: 8px; text-align: left; } th { background-color: #f7f7f7; } .footer { margin-top: 30px; font-size: 0.8em; color: #777; } </style>
    <h1>Daily Missort Summary Report</h1>
    <p><strong>Date:</strong> ${reportDateFormatted}</p>
    <p><strong>Sub-Depot Scope:</strong> ${subDepotName}</p>
    <p><strong>Total Missorts Recorded:</strong> ${report.total_missorts}</p>
    <p><strong>Submitted By:</strong> ${report.submitted_by_name || report.submitted_by_team_member_id}</p>
    <p><strong>Submitted At:</strong> ${new Date(report.submitted_at).toLocaleString('en-GB')}</p>

    <h2>Missorts by Client</h2>
  `;
  if (report.missorts_by_client.length > 0) {
    body += `<table><thead><tr><th>Client Name</th><th>Count</th></tr></thead><tbody>`;
    report.missorts_by_client.forEach(mc => {
      body += `<tr><td>${mc.client_name || mc.client_id}</td><td>${mc.count}</td></tr>`;
    });
    body += `</tbody></table>`;
  } else { body += `<p>No missorts recorded by client.</p>`; }

  body += `<h2>Missorts by Round</h2>`;
  if (report.missorts_by_round.length > 0) {
    body += `<table><thead><tr><th>Round ID</th><th>Sub-Depot</th><th>Count</th></tr></thead><tbody>`;
    report.missorts_by_round.forEach(mr => {
      const roundSubDepotName = subDepots.find(sd => sd.id === mr.sub_depot_id)?.name || `Sub ${mr.sub_depot_id}`;
      body += `<tr><td>${mr.round_id}</td><td>${roundSubDepotName}</td><td>${mr.count}</td></tr>`;
    });
    body += `</tbody></table>`;
  } else { body += `<p>No missorts recorded by round.</p>`; }

  if (report.notes) { body += `<h2>Notes</h2><p>${report.notes.replace(/\n/g, '<br>')}</p>`; }
  body += `<div class="footer">Generated by DUC Operations System</div>`;
  return { subject, body };
};

export const generateWeeklyMissingSummaryEmail = (
  report: WeeklyMissingSummaryReport,
  team: TeamMember[],
  clients: Client[],
  rounds: Round[],
  subDepots: SubDepot[]
): { subject: string; body: string } => {
  const weekStartDateFormatted = new Date(report.week_start_date + 'T00:00:00Z').toLocaleDateString('en-GB', { day: 'numeric', month: 'short' });
  const weekEndDateFormatted = new Date(report.week_end_date + 'T00:00:00Z').toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' });
  const subject = `Weekly Missing Parcels Summary: ${weekStartDateFormatted} - ${weekEndDateFormatted}`;

  let body = `
    <style>
      body { font-family: Arial, sans-serif; margin: 20px; color: #333; }
      h1, h2 { color: #2a2a2a; border-bottom: 1px solid #eee; padding-bottom: 5px; }
      table { width: 100%; border-collapse: collapse; margin-bottom: 20px; font-size: 0.9em; }
      th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
      th { background-color: #f7f7f7; }
      .footer { margin-top: 30px; font-size: 0.8em; color: #777; text-align: center; }
    </style>
    <h1>Weekly Missing Parcels Summary</h1>
    <p><strong>Week:</strong> ${weekStartDateFormatted} - ${weekEndDateFormatted}</p>
    <p><strong>Total Missing Parcels:</strong> ${report.total_missing}</p>
    <p><strong>Generated By:</strong> ${report.generated_by_name || report.generated_by_team_member_id}</p>
    <p><strong>Generated At:</strong> ${new Date(report.generated_at).toLocaleString('en-GB')}</p>

    <h2>Missing Parcels by Client</h2>
  `;
  if (report.missing_by_client.length > 0) {
    body += `<table><thead><tr><th>Client Name</th><th>Count</th></tr></thead><tbody>`;
    report.missing_by_client.forEach(mc => {
      body += `<tr><td>${mc.client_name || mc.client_id}</td><td>${mc.count}</td></tr>`;
    });
    body += `</tbody></table>`;
  } else { body += `<p>No missing parcels to categorize by client for this week.</p>`; }

  body += `<h2>Missing Parcel Details</h2>`;
  if (report.parcels_summary.length > 0) {
    body += `<table><thead><tr><th>Barcode</th><th>Sorter</th><th>Client</th><th>Round</th><th>Sub-Depot</th><th>Date Added</th></tr></thead><tbody>`;
    report.parcels_summary.forEach(p => {
      const subDepotName = subDepots.find(sd => sd.id === p.sub_depot_id)?.name || `Sub ${p.sub_depot_id}`;
      body += `<tr>
        <td>${p.barcode}</td>
        <td>${p.sorter_name || p.sorter_id}</td>
        <td>${p.client_name || p.client_id}</td>
        <td>R${p.round_id}</td>
        <td>${subDepotName}</td>
        <td>${p.date_added}</td>
      </tr>`;
    });
    body += `</tbody></table>`;
  } else { body += `<p>No specific parcel details for this week.</p>`; }

  body += `<div class="footer">Generated by DUC Operations System</div>`;
  return { subject, body };
};
