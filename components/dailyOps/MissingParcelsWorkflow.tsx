// components/dailyOps/MissingParcelsWorkflow.tsx
'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useSharedState } from '../../hooks/useSharedState';
import { RoundEntry, Client, Courier, DeliveryUnit, ParcelScanEntry } from '../../types';
import { Plus, Save, Trash2, Clock, Edit, AlertTriangle, Check, X, RefreshCw, ExternalLink, Loader2 } from 'lucide-react'; 
import Button from '../shared/Button';
import Modal from '../shared/Modal';
import { TODAY_DATE_STRING, TODAY_DATE_STRING_GB } from '../../constants'; 

interface TrackingStatus {
  status: string;
  isLoading: boolean;
  error?: string | null;
  lastUpdated?: number;
  trackingUrl?: string; 
  note?: string; 
}

const MissingParcelsWorkflow: React.FC = () => {
  const { 
    missingParcelsLog, 
    isLoadingMissingParcelsLog,
    fetchMissingParcelsLog,
    addMissingParcelsToLog,
    updateParcelInLog,
    markMissingParcelRecovered,
    couriers, 
    addCourier: apiAddCourier, // Corrected: Use aliased function from useSharedState
    rounds, 
    team, 
    clients, 
    addClient: apiAddClient, // Corrected: Use aliased function from useSharedState
    deliveryUnits, 
    addDeliveryUnit: apiAddDeliveryUnit, // Corrected: Use aliased function from useSharedState
    subDepots,
  } = useSharedState();

  const [currentCourierForWorkflow, setCurrentCourierForWorkflow] = useState<string>('');
  const [showNewCourierFormInWorkflow, setShowNewCourierFormInWorkflow] = useState<boolean>(false);
  const [newCourierNameForWorkflow, setNewCourierNameForWorkflow] = useState<string>('');
  const [newCourierIdForWorkflow, setNewCourierIdForWorkflow] = useState<string>('');
  
  const [selectedRoundEntries, setSelectedRoundEntries] = useState<Partial<ParcelScanEntry>[]>([{}]);
  const [tempRoundSelect, setTempRoundSelect] = useState<string>('');
  const [newClientNameForWorkflow, setNewClientNameForWorkflow] = useState<string>('');

  const [isEditModalOpen, setIsEditModalOpen] = useState<boolean>(false);
  const [parcelToEdit, setParcelToEdit] = useState<RoundEntry | null>(null); // RoundEntry used here as it's from the log
  const [currentEditData, setCurrentEditData] = useState<Partial<ParcelScanEntry>>({});
  
  const [editModalNewClientName, setEditModalNewClientName] = useState<string>('');
  const [editModalNewCfwdCourierId, setEditModalNewCfwdCourierId] = useState<string>('');
  const [editModalNewCfwdCourierName, setEditModalNewCfwdCourierName] = useState<string>('');
  const [editModalNewRejCourierId, setEditModalNewRejCourierId] = useState<string>('');
  const [editModalNewRejCourierName, setEditModalNewRejCourierName] = useState<string>('');
  const [editModalNewDeliveryUnitId, setEditModalNewDeliveryUnitId] = useState<string>('');
  const [editModalNewDeliveryUnitName, setEditModalNewDeliveryUnitName] = useState<string>('');

  const [isHighPriorityModalOpen, setIsHighPriorityModalOpen] = useState<boolean>(false);
  const [highPriorityChecklistStep, setHighPriorityChecklistStep] = useState<number>(0);
  const [parcelForHighPriorityProcessing, setParcelForHighPriorityProcessing] = useState<RoundEntry | Partial<ParcelScanEntry> | null>(null);
  const [isEditingHighPriorityParcel, setIsEditingHighPriorityParcel] = useState<boolean>(false);
  const [highPriorityActionCallback, setHighPriorityActionCallback] = useState<(() => void) | null>(null);
  const [currentHighPriorityAlert, setCurrentHighPriorityAlert] = useState<string | null>(null);

  const [trackingStatuses, setTrackingStatuses] = useState<Record<string, TrackingStatus>>({});
  const [isManualRefreshing, setIsManualRefreshing] = useState<boolean>(false);
  const [lastManualRefreshAllTimestamp, setLastManualRefreshAllTimestamp] = useState<number>(0);
  const REFRESH_ALL_COOLDOWN = 30000; 
  const [processedLogIdsForSessionFetch, setProcessedLogIdsForSessionFetch] = useState<Set<string>>(new Set());
  const [isSubmittingForm, setIsSubmittingForm] = useState(false);


  useEffect(() => {
    fetchMissingParcelsLog();
  }, [fetchMissingParcelsLog]);

  const highPriorityQuestions = [ "This is a high value client. Have you checked the cages either side?", "Have you asked the courier to check their vehicle?", "Have you completed a vehicle search?", "Has CCTV been viewed?", "Are you sure you want to mark this parcel as missing?" ];
  const highPriorityNoAlerts = [ "Please check cages before approving this missing parcel.", "Please ask the courier to check their vehicle before approving this missing parcel.", "Please check the courier's vehicle before approving this missing parcel.", "Please view CCTV before approving this missing parcel.", "" ];

  const updateSelectedRoundEntry = (index: number, updatedField: Partial<ParcelScanEntry>) => { setSelectedRoundEntries(prev => prev.map((entry, i) => (i === index ? { ...entry, ...updatedField } : entry))); };
  const addNewCourierForWorkflow = async () => { if (!newCourierIdForWorkflow.trim() || !newCourierNameForWorkflow.trim()) { alert('Courier ID and Name are required.'); return; } const newId = newCourierIdForWorkflow.trim().toUpperCase(); if (couriers.some(c => c.id === newId)) { alert(`Courier ID ${newId} already exists.`); return; } const newEntry: Omit<Courier, 'createdAt' | 'updatedAt'> = { id: newId, name: newCourierNameForWorkflow.trim(), is_active: true }; const savedCourier = await apiAddCourier(newEntry); if(savedCourier) {setCurrentCourierForWorkflow(newId); setNewCourierIdForWorkflow(''); setNewCourierNameForWorkflow(''); setShowNewCourierFormInWorkflow(false);} else {alert('Failed to add courier.')} };
  const addNewClientForWorkflow = async () => { if (!newClientNameForWorkflow.trim()) { alert('Client name is required.'); return; } const newEntryData: Omit<Client, 'id'|'createdAt'|'updatedAt'> = { name: newClientNameForWorkflow.trim(), is_high_priority: false }; if (clients.some(c => c.name.toLowerCase() === newEntryData.name.toLowerCase())) { alert(`Client "${newEntryData.name}" already exists.`); return; } const savedClient = await apiAddClient(newEntryData); if(savedClient){setSelectedRoundEntries(prev => prev.map(entry => entry.client_id === -1 /* Placeholder for new */ ? { ...entry, client_id: savedClient.id } : entry )); setNewClientNameForWorkflow('');} else {alert('Failed to add client.')} };
  
  const handleAddAllSelectedToLog = async () => {
    setIsSubmittingForm(true);
    const entriesToAdd: Omit<ParcelScanEntry, 'id' | 'created_at' | 'updated_at'>[] = selectedRoundEntries
      .map(entry => ({
        ...entry,
        time_scanned: entry.time_scanned || new Date().toISOString(), // Ensure time_scanned
        is_recovered: entry.is_recovered === undefined ? false : entry.is_recovered,
        scan_type: entry.scan_type || 'Standard',
      } as Omit<ParcelScanEntry, 'id' | 'created_at' | 'updated_at'>)) // Cast after filling defaults
      .filter(entry => entry.barcode && entry.barcode.length === 16 && entry.round_id && entry.courier_id && entry.sorter_team_member_id && entry.client_id);
    
    if (entriesToAdd.length !== selectedRoundEntries.length) {
        alert("Some entries were invalid (missing barcode, round, courier, sorter, or client) and were not added.");
    }
    if (entriesToAdd.length > 0) {
        const result = await addMissingParcelsToLog(entriesToAdd);
        if (result) {
          alert(`${result.length} missing parcel(s) added to log.`);
          setSelectedRoundEntries([{}]); 
          setTempRoundSelect(''); 
        } else {
          alert("Failed to add parcels. Please check console for errors.");
        }
    }
    setIsSubmittingForm(false);
  };

  const openEditModal = (parcel: RoundEntry) => { setParcelToEdit(parcel); setCurrentEditData({ ...parcel }); setIsEditModalOpen(true); };
  const handleEditModalChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => { const { name, value, type } = e.target; const checked = (e.target as HTMLInputElement).checked; setCurrentEditData(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value })); };
  const handleSaveEdit = async () => { if (!parcelToEdit || !currentEditData.barcode || currentEditData.barcode.length !== 16) { alert("Barcode must be 16 digits."); return; } setIsSubmittingForm(true); const result = await updateParcelInLog(parcelToEdit.id, currentEditData); if (result) { alert("Parcel updated."); setIsEditModalOpen(false); setParcelToEdit(null); setEditModalNewClientName(''); setEditModalNewCfwdCourierId(''); setEditModalNewCfwdCourierName(''); setEditModalNewRejCourierId(''); setEditModalNewRejCourierName(''); setEditModalNewDeliveryUnitId(''); setEditModalNewDeliveryUnitName(''); } else { alert("Failed to update parcel."); } setIsSubmittingForm(false); };
  const toggleParcelRecoveredStatusInLog = async (logId: string, currentStatus: boolean) => { await markMissingParcelRecovered(logId, !currentStatus); };
  const handleAddClientInEditModal = async () => { if (!editModalNewClientName.trim()) { alert('Client name is required.'); return; } const newEntryData: Omit<Client, 'id'|'createdAt'|'updatedAt'> = { name: editModalNewClientName.trim(), is_high_priority: false }; if (clients.some(c => c.name.toLowerCase() === newEntryData.name.toLowerCase())) { alert(`Client "${newEntryData.name}" already exists.`); return; } const savedClient = await apiAddClient(newEntryData); if(savedClient){setCurrentEditData(prev => ({ ...prev, client_id: savedClient.id })); setEditModalNewClientName('');} else {alert('Failed to add client.')} };
  const handleAddCourierInEditModal = async (type: 'cfwd' | 'rej') => { const id = type === 'cfwd' ? editModalNewCfwdCourierId : editModalNewRejCourierId; const name = type === 'cfwd' ? editModalNewCfwdCourierName : editModalNewRejCourierName; if (!id.trim() || !name.trim()) { alert('Courier ID and Name are required.'); return; } const newId = id.trim().toUpperCase(); if (couriers.some(c => c.id === newId)) { alert(`Courier ID ${newId} already exists.`); return; } const newEntry: Omit<Courier, 'createdAt'|'updatedAt'> = { id: newId, name: name.trim(), is_active: true }; const savedCourier = await apiAddCourier(newEntry); if(savedCourier) { if (type === 'cfwd') { setCurrentEditData(prev => ({ ...prev, cfwd_courier_id: newId })); setEditModalNewCfwdCourierId(''); setEditModalNewCfwdCourierName(''); } else { setCurrentEditData(prev => ({ ...prev, rejected_courier_id: newId })); setEditModalNewRejCourierId(''); setEditModalNewRejCourierName(''); } } else {alert('Failed to add courier.')} };
  const handleAddDeliveryUnitInEditModal = async () => { if (!editModalNewDeliveryUnitId.trim() || !editModalNewDeliveryUnitName.trim()) { alert('Delivery Unit ID and Name are required.'); return; } const newId = editModalNewDeliveryUnitId.trim().toUpperCase(); if (deliveryUnits.some(du => du.id === newId)) { alert(`Delivery Unit ID ${newId} already exists.`); return; } const newEntryData: Omit<DeliveryUnit, 'createdAt'|'updatedAt'> = { id: newId, name: editModalNewDeliveryUnitName.trim() }; const savedDU = await apiAddDeliveryUnit(newEntryData); if(savedDU){setCurrentEditData(prev => ({ ...prev, misrouted_du_id: newId })); setEditModalNewDeliveryUnitId(''); setEditModalNewDeliveryUnitName('');} else {alert('Failed to add delivery unit.')} };

  const todaysMissingParcelsLog = missingParcelsLog.filter(p => p.dateAdded === TODAY_DATE_STRING_GB && p.courier_id);
  const additionalDetailsParcelsLog = todaysMissingParcelsLog.filter(p => (Number(p.noScans) > 0) || (Number(p.carryForwards) > 0) || (p.cfwd_courier_id && p.cfwd_courier_id.trim() !== '') || (p.scan_type === 'Misrouted' && p.misrouted_du_id && p.misrouted_du_id.trim() !== '') || (p.scan_type === 'Rejected' && p.rejected_courier_id && p.rejected_courier_id.trim() !== '') );
  const openHighPriorityModal = (parcel: RoundEntry | Partial<ParcelScanEntry>, actionCallback: () => void) => { setParcelForHighPriorityProcessing(parcel); setHighPriorityActionCallback(() => actionCallback); setHighPriorityChecklistStep(0); setCurrentHighPriorityAlert(null); setIsHighPriorityModalOpen(true); };
  const handleHighPriorityChecklistNext = () => { if (highPriorityChecklistStep < highPriorityQuestions.length - 1) { setHighPriorityChecklistStep(prev => prev + 1); setCurrentHighPriorityAlert(null); } else { if (highPriorityActionCallback) highPriorityActionCallback(); setIsHighPriorityModalOpen(false); }};
  const handleHighPriorityChecklistNo = () => { setCurrentHighPriorityAlert(highPriorityNoAlerts[highPriorityChecklistStep]); };
  
  const handleAddEntryClick = async (index: number) => {
    const entry = selectedRoundEntries[index];
    const clientIsHighPriority = clients.find(c => c.id === entry.client_id)?.is_high_priority;
    const action = async () => {
      setIsSubmittingForm(true);
      const newEntryData: Omit<ParcelScanEntry, 'id' | 'created_at' | 'updated_at'> = {
        barcode: entry.barcode || '',
        round_id: entry.round_id || '',
        drop_number: entry.drop_number || 0,
        sub_depot_id: entry.sub_depot_id || 0,
        courier_id: entry.courier_id || '',
        sorter_team_member_id: entry.sorter_team_member_id || '',
        client_id: entry.client_id || 0,
        time_scanned: entry.time_scanned || new Date().toISOString(),
        scan_type: entry.scan_type || 'Standard',
        cfwd_courier_id: entry.cfwd_courier_id || undefined,
        misrouted_du_id: entry.misrouted_du_id || undefined,
        rejected_courier_id: entry.rejected_courier_id || undefined,
        is_recovered: entry.is_recovered === undefined ? false : entry.is_recovered,
      };
      const result = await addMissingParcelsToLog([newEntryData]);
      if (result && result.length > 0) {
        alert(`Parcel ${newEntryData.barcode} added to log.`);
        setSelectedRoundEntries(prev => prev.filter((_, i) => i !== index));
        if (selectedRoundEntries.length === 1) setTempRoundSelect('');
      } else {
        alert(`Failed to add parcel ${newEntryData.barcode}.`);
      }
      setIsSubmittingForm(false);
    };
    if (clientIsHighPriority && !entry.is_recovered) { setIsEditingHighPriorityParcel(false); openHighPriorityModal(entry, action); } else { action(); }
  };
  
  const handleEditParcelClick = (parcel: RoundEntry) => { const clientIsHighPriority = clients.find(c => c.id === parcel.client_id)?.is_high_priority; if (clientIsHighPriority && !parcel.is_recovered) { setIsEditingHighPriorityParcel(true); openHighPriorityModal(parcel, () => openEditModal(parcel)); } else { openEditModal(parcel); }};
  const fetchSingleParcelStatus = useCallback(async (logId: string, barcode: string) => { if (barcode.length !== 16) { setTrackingStatuses(prev => ({ ...prev, [logId]: { status: 'N/A (Invalid Barcode)', isLoading: false } })); return; } setTrackingStatuses(prev => { if (prev[logId]?.isLoading) return prev; return { ...prev, [logId]: { status: 'Fetching...', isLoading: true, error: null } }; }); try { const response = await fetch(`/api/track-parcel?barcode=${barcode}`); const data = await response.json(); if (response.status === 429) { setTrackingStatuses(prev => ({ ...prev, [logId]: { status: data.status || 'Rate limited', isLoading: false, error: data.error || 'Rate limited. Try again later.', lastUpdated: Date.now(), note: data.note }})); } else if (!response.ok || data.error) { throw new Error(data.error || data.status || `API error ${response.status}`); } else if (data.status) { setTrackingStatuses(prev => ({ ...prev, [logId]: { status: data.status, isLoading: false, lastUpdated: Date.now(), error: null, trackingUrl: data.trackingUrl, note: data.note }})); } else { throw new Error('Unexpected response from tracking API'); } } catch (error) { console.error(`Error tracking parcel ${barcode} for logId ${logId}:`, error); setTrackingStatuses(prev => ({ ...prev, [logId]: { status: 'Unable to fetch', isLoading: false, error: (error as Error).message, lastUpdated: Date.now(), note: 'Error during fetch.' }})); } }, []);
  const refreshAllTrackingStatuses = useCallback(async (isManual = false) => { if (isManual) { setIsManualRefreshing(true); setLastManualRefreshAllTimestamp(Date.now()); setProcessedLogIdsForSessionFetch(new Set()); } else { const now = Date.now(); if (now - lastManualRefreshAllTimestamp < REFRESH_ALL_COOLDOWN) { return; } } const promises = todaysMissingParcelsLog.filter(parcel => parcel.id && parcel.barcode && parcel.barcode.length === 16).map(parcel => { if (isManual) { return fetchSingleParcelStatus(parcel.id!, parcel.barcode); } return Promise.resolve(); }); await Promise.all(promises); if (isManual) setIsManualRefreshing(false); }, [todaysMissingParcelsLog, fetchSingleParcelStatus, lastManualRefreshAllTimestamp, setProcessedLogIdsForSessionFetch]);
  useEffect(() => { const newProcessedIds = new Set(processedLogIdsForSessionFetch); let fetchInitiated = false; todaysMissingParcelsLog.forEach(parcel => { if (parcel.id && parcel.barcode && parcel.barcode.length === 16) { if (!newProcessedIds.has(parcel.id)) { fetchSingleParcelStatus(parcel.id, parcel.barcode); newProcessedIds.add(parcel.id); fetchInitiated = true; } } }); if (fetchInitiated) { setProcessedLogIdsForSessionFetch(newProcessedIds); } }, [todaysMissingParcelsLog, fetchSingleParcelStatus, processedLogIdsForSessionFetch]);

  if (isLoadingMissingParcelsLog) {
    return <div className="flex justify-center items-center h-64"><Loader2 className="h-8 w-8 animate-spin text-blue-500" /> <span className="ml-2">Loading missing parcels...</span></div>;
  }

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow p-6">
        <h2 className="text-xl font-semibold mb-4">Log Missing Parcels & Courier Approvals</h2>
         <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div> <label htmlFor="courierSelectWorkflow" className="block text-sm font-medium text-gray-700">Courier</label> <select id="courierSelectWorkflow" value={currentCourierForWorkflow} onChange={e => { const val = e.target.value; if (val === 'ADD_NEW_COURIER') { setShowNewCourierFormInWorkflow(true); } else { setShowNewCourierFormInWorkflow(false); } setCurrentCourierForWorkflow(val); }} className="mt-1 block w-full p-2 border-gray-300 rounded-md shadow-sm"> <option value="">-- Select Courier --</option> {couriers.sort((a,b) => a.name.localeCompare(b.name)).map(c => <option key={c.id} value={c.id}>{c.name} ({c.id})</option>)} <option value="ADD_NEW_COURIER" className="text-blue-600 font-semibold">➕ Add New Courier</option> </select> {showNewCourierFormInWorkflow && ( <div className="mt-2 p-3 bg-blue-50 border border-blue-200 rounded-md space-y-2"> <input type="text" value={newCourierIdForWorkflow} onChange={e=>setNewCourierIdForWorkflow(e.target.value)} placeholder="New Courier ID (e.g. C00X)" className="block w-full p-1.5 text-sm border-gray-300 rounded-md"/> <input type="text" value={newCourierNameForWorkflow} onChange={e=>setNewCourierNameForWorkflow(e.target.value)} placeholder="New Courier Name" className="block w-full p-1.5 text-sm border-gray-300 rounded-md"/> <Button onClick={addNewCourierForWorkflow} size="sm">Add This Courier</Button> </div> )} </div>
          <div> <label htmlFor="roundSelectWorkflow" className="block text-sm font-medium text-gray-700">Round</label> <select id="roundSelectWorkflow" value={tempRoundSelect} onChange={e => setTempRoundSelect(e.target.value)} className="mt-1 block w-full p-2 border-gray-300 rounded-md shadow-sm" disabled={!currentCourierForWorkflow}> <option value="">-- Select Round --</option> {rounds.sort((a,b) => a.id.localeCompare(b.id)).map(r => <option key={r.id} value={r.id}>R{r.id} (Drop {r.drop_number}, Sub {r.sub_depot_id})</option>)} </select> </div>
        </div>
        <div className="text-right mb-4"> <Button onClick={() => { if (!currentCourierForWorkflow || !tempRoundSelect) { alert("Please select both Courier and Round."); return; } const roundData = rounds.find(r => r.id === tempRoundSelect); if (!roundData) { alert("Selected round data not found."); return; } setSelectedRoundEntries(prev => [...prev, { barcode: '', courier_id: currentCourierForWorkflow, round_id: tempRoundSelect, drop_number: roundData.drop_number, sub_depot_id: roundData.sub_depot_id, sorter_team_member_id: '', client_id: 0, time_scanned: new Date().toISOString(), scan_type: 'Standard' }]); }} variant="outline" leftIcon={Plus} disabled={!currentCourierForWorkflow || !tempRoundSelect || selectedRoundEntries.length >= 5} title={selectedRoundEntries.length >= 5 ? "Max 5 entries at a time for this form" : "Add parcel entry form"} > Add Parcel Entry </Button> </div>
        {selectedRoundEntries.length > 0 && selectedRoundEntries.some(e => Object.keys(e).length > 0) && ( <div className="space-y-4 mb-6 border-t pt-4"> <h3 className="text-md font-semibold text-gray-700">New Missing Parcel Entries (for Courier {currentCourierForWorkflow}, Round {tempRoundSelect})</h3> {selectedRoundEntries.map((entry, index) => ( Object.keys(entry).length > 0 && <div key={index} className="p-4 border rounded-md bg-gray-50 space-y-3"> <p className="text-sm font-medium text-gray-600">Parcel #{index + 1}</p> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3"> <div><label className="text-xs text-gray-500">Barcode (16 digits)</label><input type="text" value={entry.barcode || ''} onChange={(e) => updateSelectedRoundEntry(index, {barcode: e.target.value.toUpperCase()})} maxLength={16} className="mt-0.5 block w-full p-1.5 text-sm border-gray-300 rounded-md" placeholder="16 Digit Barcode"/></div> <div><label className="text-xs text-gray-500">Sorter</label><select value={entry.sorter_team_member_id || ''} onChange={(e) => updateSelectedRoundEntry(index, {sorter_team_member_id: e.target.value})} className="mt-0.5 block w-full p-1.5 text-sm border-gray-300 rounded-md"><option value="">-- Select Sorter --</option>{team.filter(tm => tm.position === 'Sorter').map(tm => <option key={tm.id} value={tm.id}>{tm.name}</option>)}</select></div> <div><label className="text-xs text-gray-500">Client</label> <select value={entry.client_id || ''} onChange={(e) => updateSelectedRoundEntry(index, {client_id: parseInt(e.target.value) || -1})} className="mt-0.5 block w-full p-1.5 text-sm border-gray-300 rounded-md"> <option value="">-- Select Client --</option> {clients.sort((a,b) => a.name.localeCompare(b.name)).map(c => <option key={c.id} value={c.id}>{c.name}</option>)} <option value="-1" className="text-blue-600">➕ Add New Client</option> </select> {entry.client_id === -1 && ( <div className="mt-1"><input type="text" value={newClientNameForWorkflow} onChange={e => setNewClientNameForWorkflow(e.target.value)} placeholder="New Client Name" className="w-full p-1 text-xs border-gray-300 rounded-md"/> <Button onClick={addNewClientForWorkflow} size="sm" className="text-xs mt-1">Add & Use Client</Button></div> )} </div> <div><label className="text-xs text-gray-500">Time Scanned (HH:MM)</label><input type="time" value={(entry.time_scanned || new Date().toISOString()).substring(11,16)} onChange={(e) => updateSelectedRoundEntry(index, {time_scanned: `${new Date().toISOString().substring(0,11)}${e.target.value}:00.000Z`})} className="mt-0.5 block w-full p-1.5 text-sm border-gray-300 rounded-md"/></div> </div> <details className="text-xs"> <summary className="cursor-pointer text-gray-600 hover:text-gray-800">Add Courier Approval Details...</summary> <div className="mt-2 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 border-t pt-3"> <div><label className="text-xs text-gray-500">Scan Type</label><select value={entry.scan_type || 'Standard'} onChange={(e) => updateSelectedRoundEntry(index, {scan_type: e.target.value as ParcelScanEntry['scan_type']})} className="mt-0.5 block w-full p-1.5 text-sm border-gray-300 rounded-md"><option value="Standard">Standard</option><option value="NoScan">NoScan</option><option value="CarryForward">CarryForward</option><option value="Misrouted">Misrouted</option><option value="Rejected">Rejected</option></select></div> {entry.scan_type === 'CarryForward' && (<div><label className="text-xs text-gray-500">CFWD Courier #</label><select value={entry.cfwd_courier_id || ''} onChange={(e) => updateSelectedRoundEntry(index, {cfwd_courier_id: e.target.value})} className="mt-0.5 block w-full p-1.5 text-sm border-gray-300 rounded-md"><option value="">-- Select --</option>{couriers.map(c => <option key={c.id} value={c.id}>{c.name} ({c.id})</option>)}</select></div>)} {entry.scan_type === 'Misrouted' && (<div><label className="text-xs text-gray-500">Misrouted DU</label><select value={entry.misrouted_du_id || ''} onChange={(e) => updateSelectedRoundEntry(index, {misrouted_du_id: e.target.value})} className="mt-0.5 block w-full p-1.5 text-sm border-gray-300 rounded-md"><option value="">-- Select --</option>{deliveryUnits.map(du => <option key={du.id} value={du.id}>{du.name} ({du.id})</option>)}</select></div>)} {entry.scan_type === 'Rejected' && (<div><label className="text-xs text-gray-500">Rejected Courier #</label><select value={entry.rejected_courier_id || ''} onChange={(e) => updateSelectedRoundEntry(index, {rejected_courier_id: e.target.value})} className="mt-0.5 block w-full p-1.5 text-sm border-gray-300 rounded-md"><option value="">-- Select --</option>{couriers.map(c => <option key={c.id} value={c.id}>{c.name} ({c.id})</option>)}</select></div>)} </div> </details> <div className="col-span-full md:col-span-1 lg:col-span-1 flex items-end pt-2"> <Button onClick={() => handleAddEntryClick(index)} variant="primary" size="sm" leftIcon={Plus} className="w-full" isLoading={isSubmittingForm} disabled={isSubmittingForm}>Add to Log</Button> </div> </div> ))} {selectedRoundEntries.length > 0 && ( <div className="text-right mt-4"> <Button onClick={handleAddAllSelectedToLog} variant="primary" leftIcon={Save} disabled={!selectedRoundEntries.every(e=> e.barcode && e.barcode.length === 16 && e.sorter_team_member_id && e.client_id && e.client_id !== -1) || isSubmittingForm} isLoading={isSubmittingForm}> Add All {selectedRoundEntries.length} To Log </Button> </div> )} </div> )}
      </div>

      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex justify-between items-center mb-4"> 
          <h3 className="text-lg font-semibold">Complete Missing Parcels Log for <span suppressHydrationWarning>Today ({TODAY_DATE_STRING_GB})</span></h3> 
          <Button onClick={() => refreshAllTrackingStatuses(true)} variant="outline" size="sm" leftIcon={RefreshCw} isLoading={isManualRefreshing} disabled={isLoadingMissingParcelsLog}> {isManualRefreshing ? 'Refreshing...' : 'Refresh Tracking'} </Button> 
        </div>
        {isLoadingMissingParcelsLog && <div className="text-center py-4"><Loader2 className="h-6 w-6 animate-spin inline-block mr-2"/> Fetching latest log...</div>}
        {!isLoadingMissingParcelsLog && todaysMissingParcelsLog.length === 0 ? ( <p className="text-gray-500 text-center py-4">No missing parcels logged for today yet.</p> ) : !isLoadingMissingParcelsLog && ( <div className="overflow-x-auto"> <table className="w-full text-sm mb-8"> <caption className="text-md font-semibold text-left mb-2 text-gray-700">Missing Parcel Details</caption> <thead className="bg-gray-50"> <tr> {['Barcode', 'Current Status', 'Courier', 'Round (Drop)', 'Sub Depot', 'Sorter', 'Client', 'Scan Time', 'Recovered?', 'Actions'].map(header => ( <th key={header} className="p-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{header}</th> ))} </tr> </thead> <tbody className="divide-y divide-gray-200"> {todaysMissingParcelsLog.map(p => { const trackingInfo = p.id ? trackingStatuses[p.id] : null; let statusDisplay; let statusTitle = `Last updated: ${trackingInfo?.lastUpdated ? new Date(trackingInfo.lastUpdated).toLocaleTimeString() : 'N/A'}`; if (trackingInfo?.note) statusTitle += ` | Note: ${trackingInfo.note}`; if (trackingInfo?.isLoading) { statusDisplay = <span className="text-gray-500">Fetching...</span>; } else if (trackingInfo?.error) { statusDisplay = <span className="text-red-500" title={statusTitle}>{trackingInfo.status || 'Unable to fetch'}</span>; } else if (trackingInfo?.trackingUrl && trackingInfo.status === 'Click to track manually') { statusDisplay = ( <a href={trackingInfo.trackingUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:text-blue-800 underline" title={statusTitle}> {trackingInfo.status} {trackingInfo.note && <span className="block text-xs text-gray-500 italic">({trackingInfo.note})</span>} </a> ); } else if (trackingInfo?.status) { let statusStyle = "font-medium "; const statusText = trackingInfo.status.toLowerCase(); if (statusText.includes("delivered") || statusText.includes("out for delivery")) statusStyle += "text-green-600"; else if (statusText.includes("update on your parcel") || statusText.includes("unable to verify")) statusStyle += "text-orange-600"; else if (statusText.includes("not found") || statusText.includes("invalid barcode")) statusStyle += "text-gray-400"; else statusStyle += "text-red-600"; statusDisplay = <span className={statusStyle} title={statusTitle}>{trackingInfo.status}</span>; } else if (p.barcode.length !== 16) { statusDisplay = <span className="text-gray-400">N/A (Invalid Barcode)</span>; } else { statusDisplay = <span className="text-gray-400" title={statusTitle}>Auto Tracking</span>; } return ( <tr key={p.id || p.barcode} className={p.is_recovered ? 'bg-green-50 hover:bg-green-100' : 'hover:bg-gray-50'}> <td className="p-2 whitespace-nowrap"> <a href={`https://www.evri.com/track/parcel/${p.barcode}/details`} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline flex items-center gap-1"> {p.barcode} <ExternalLink size={12}/> </a> </td> <td className="p-2 whitespace-nowrap text-xs"> {statusDisplay} </td> <td className="p-2 whitespace-nowrap">{couriers.find(c=>c.id===p.courier_id)?.name || p.courier_id}</td> <td className="p-2 whitespace-nowrap">R{p.round_id} (D{p.drop_number})</td> <td className="p-2 whitespace-nowrap">{subDepots.find(s=>s.id===p.sub_depot_id)?.name || p.sub_depot_id}</td> <td className="p-2 whitespace-nowrap">{team.find(t=>t.id===p.sorter_team_member_id)?.name || p.sorter_team_member_id}</td> <td className="p-2 whitespace-nowrap">{clients.find(c=>c.id===p.client_id)?.name || p.client_id}</td> <td className="p-2 whitespace-nowrap">{new Date(p.time_scanned).toLocaleTimeString('en-GB')}</td> <td className="p-2 text-center"> <button onClick={() => toggleParcelRecoveredStatusInLog(p.id!, p.is_recovered || false)} className={`p-1 rounded-full ${p.is_recovered ? 'bg-green-500 hover:bg-green-600' : 'bg-red-500 hover:bg-red-600'}`} title={p.is_recovered ? "Mark as Missing" : "Mark as Recovered"}> {p.is_recovered ? <Check size={14} className="text-white"/> : <X size={14} className="text-white"/>} </button> </td> <td className="p-2 whitespace-nowrap"> <Button onClick={() => handleEditParcelClick(p)} variant="ghost" size="sm"><Edit size={16}/></Button> </td> </tr> ); })} </tbody> </table> {additionalDetailsParcelsLog.length > 0 ? ( <table className="w-full text-sm"> <caption className="text-md font-semibold text-left mb-2 text-gray-700">Additional Details</caption> <thead className="bg-gray-50"> <tr> {['Date', 'Courier', 'Round (Drop)', 'Scan Type', 'CFWD C#', 'Misroute DU', 'Rej. C#'].map(header => ( <th key={header} className="p-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{header}</th> ))} </tr> </thead> <tbody className="divide-y divide-gray-200"> {additionalDetailsParcelsLog.map(p => ( <tr key={`details-${p.id || p.barcode}`} className={p.is_recovered ? 'bg-green-50 hover:bg-green-100' : 'hover:bg-gray-50'}> <td className="p-2 whitespace-nowrap">{p.dateAdded}</td> <td className="p-2 whitespace-nowrap">{couriers.find(c=>c.id===p.courier_id)?.name || p.courier_id}</td> <td className="p-2 whitespace-nowrap">R{p.round_id} (D{p.drop_number})</td> <td className="p-2 text-center">{p.scan_type}</td> <td className="p-2 whitespace-nowrap">{couriers.find(c=>c.id===p.cfwd_courier_id)?.name || p.cfwd_courier_id || 'N/A'}</td> <td className="p-2 whitespace-nowrap">{deliveryUnits.find(du=>du.id===p.misrouted_du_id)?.name || p.misrouted_du_id || 'N/A'}</td> <td className="p-2 whitespace-nowrap">{couriers.find(c=>c.id===p.rejected_courier_id)?.name || p.rejected_courier_id || 'N/A'}</td> </tr> ))} </tbody> </table> ) : ( <p className="text-gray-500 text-center py-4 text-sm">No entries with additional details for today.</p> )} </div> )}
      </div>
      <Modal isOpen={isEditModalOpen} onClose={() => setIsEditModalOpen(false)} title={`Edit Parcel Log: ${parcelToEdit?.barcode}`} size="2xl" footer={ <> <Button variant="outline" onClick={() => setIsEditModalOpen(false)}>Cancel</Button> <Button onClick={handleSaveEdit} isLoading={isSubmittingForm} disabled={isSubmittingForm}>Save Changes</Button> </> }> {parcelToEdit && currentEditData && ( <div className="space-y-4"> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div><label className="block text-sm font-medium">Barcode</label><input type="text" name="barcode" value={currentEditData.barcode || ''} onChange={handleEditModalChange} className="mt-1 p-2 border rounded-md w-full" maxLength={16}/></div> <div><label className="block text-sm font-medium">Sorter</label><select name="sorter_team_member_id" value={currentEditData.sorter_team_member_id || ''} onChange={handleEditModalChange} className="mt-1 p-2 border rounded-md w-full">{team.filter(tm => tm.position === 'Sorter').sort((a,b) => a.name.localeCompare(b.name)).map(s => <option key={s.id} value={s.id}>{s.name}</option>)}</select></div> <div><label className="block text-sm font-medium">Client</label> <select name="client_id" value={currentEditData.client_id || ''} onChange={handleEditModalChange} className="mt-1 p-2 border rounded-md w-full"> {clients.sort((a,b) => a.name.localeCompare(b.name)).map(c => <option key={c.id} value={c.id}>{c.name}</option>)} <option value="-1">➕ Add New Client</option> </select> {currentEditData.client_id === -1 && ( <div className="mt-1 p-2 bg-blue-50 border rounded-md space-y-1"> <input type="text" value={editModalNewClientName} onChange={e => setEditModalNewClientName(e.target.value)} placeholder="New Client Name" className="block w-full p-1.5 text-sm border-gray-300 rounded-md" /> <Button onClick={handleAddClientInEditModal} size="sm" variant="secondary">Add New Client</Button> </div> )} </div> <div><label className="block text-sm font-medium">Actual Scan Time</label><input type="time" name="time_scanned" value={(currentEditData.time_scanned || new Date().toISOString()).substring(11,16)} onChange={(e) => setCurrentEditData(prev => ({...prev, time_scanned: `${new Date().toISOString().substring(0,11)}${e.target.value}:00.000Z`}))} className="mt-1 p-2 border rounded-md w-full"/></div> <div className="md:col-span-2 flex items-center"><input type="checkbox" name="is_recovered" checked={currentEditData.is_recovered || false} onChange={handleEditModalChange} className="h-4 w-4 mr-2"/> <label className="text-sm font-medium">Parcel Recovered?</label></div> </div> <h4 className="text-md font-semibold pt-3 border-t mt-4">Courier Approval Details</h4> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div><label className="block text-sm font-medium">Scan Type</label><select name="scan_type" value={currentEditData.scan_type || 'Standard'} onChange={handleEditModalChange} className="mt-1 p-2 border rounded-md w-full"><option value="Standard">Standard</option><option value="NoScan">NoScan</option><option value="CarryForward">CarryForward</option><option value="Misrouted">Misrouted</option><option value="Rejected">Rejected</option></select></div> {currentEditData.scan_type === 'CarryForward' && (<div><label className="block text-sm font-medium">CFWD Courier #</label> <select name="cfwd_courier_id" value={currentEditData.cfwd_courier_id || ''} onChange={handleEditModalChange} className="mt-1 p-2 border rounded-md w-full"> <option value="">-- Select --</option>{couriers.sort((a,b) => a.name.localeCompare(b.name)).map(c => <option key={c.id} value={c.id}>{c.name} ({c.id})</option>)} <option value="ADD_NEW_CFWD_COURIER_IN_EDIT">➕ Add New Courier</option> </select> {currentEditData.cfwd_courier_id === 'ADD_NEW_CFWD_COURIER_IN_EDIT' && ( <div className="mt-1 p-2 bg-blue-50 border rounded-md space-y-1"> <input type="text" value={editModalNewCfwdCourierId} onChange={e => setEditModalNewCfwdCourierId(e.target.value.toUpperCase())} placeholder="New Courier ID" className="block w-full p-1.5 text-sm border-gray-300 rounded-md" /> <input type="text" value={editModalNewCfwdCourierName} onChange={e => setEditModalNewCfwdCourierName(e.target.value)} placeholder="New Courier Name" className="block w-full p-1.5 text-sm border-gray-300 rounded-md mt-1" /> <Button onClick={() => handleAddCourierInEditModal('cfwd')} size="sm" variant="secondary">Add New CFWD Courier</Button> </div> )} </div>)} {currentEditData.scan_type === 'Misrouted' && (<div><label className="block text-sm font-medium">Misrouted DU</label> <select name="misrouted_du_id" value={currentEditData.misrouted_du_id || ''} onChange={handleEditModalChange} className="mt-1 p-2 border rounded-md w-full"> <option value="">-- Select --</option>{deliveryUnits.sort((a,b) => a.name.localeCompare(b.name)).map(du => <option key={du.id} value={du.id}>{du.name} ({du.id})</option>)} <option value="ADD_NEW_DU_IN_EDIT">➕ Add New Delivery Unit</option> </select> {currentEditData.misrouted_du_id === 'ADD_NEW_DU_IN_EDIT' && ( <div className="mt-1 p-2 bg-blue-50 border rounded-md space-y-1"> <input type="text" value={editModalNewDeliveryUnitId} onChange={e => setEditModalNewDeliveryUnitId(e.target.value.toUpperCase())} placeholder="New DU ID (e.g. NWD)" className="block w-full p-1.5 text-sm border-gray-300 rounded-md" /> <input type="text" value={editModalNewDeliveryUnitName} onChange={e => setEditModalNewDeliveryUnitName(e.target.value)} placeholder="New DU Name (e.g. Nationwide)" className="block w-full p-1.5 text-sm border-gray-300 rounded-md mt-1" /> <Button onClick={handleAddDeliveryUnitInEditModal} size="sm" variant="secondary">Add New DU</Button> </div> )} </div>)} {currentEditData.scan_type === 'Rejected' && (<div><label className="block text-sm font-medium">Rejected Courier #</label> <select name="rejected_courier_id" value={currentEditData.rejected_courier_id || ''} onChange={handleEditModalChange} className="mt-1 p-2 border rounded-md w-full"> <option value="">-- Select --</option>{couriers.sort((a,b) => a.name.localeCompare(b.name)).map(c => <option key={c.id} value={c.id}>{c.name} ({c.id})</option>)} <option value="ADD_NEW_REJ_COURIER_IN_EDIT">➕ Add New Courier</option> </select> {currentEditData.rejected_courier_id === 'ADD_NEW_REJ_COURIER_IN_EDIT' && ( <div className="mt-1 p-2 bg-blue-50 border rounded-md space-y-1"> <input type="text" value={editModalNewRejCourierId} onChange={e => setEditModalNewRejCourierId(e.target.value.toUpperCase())} placeholder="New Courier ID" className="block w-full p-1.5 text-sm border-gray-300 rounded-md" /> <input type="text" value={editModalNewRejCourierName} onChange={e => setEditModalNewRejCourierName(e.target.value)} placeholder="New Courier Name" className="block w-full p-1.5 text-sm border-gray-300 rounded-md mt-1" /> <Button onClick={() => handleAddCourierInEditModal('rej')} size="sm" variant="secondary">Add New Rejected Courier</Button> </div> )} </div>)} </div> </div> )} </Modal>
      <Modal isOpen={isHighPriorityModalOpen} onClose={() => setIsHighPriorityModalOpen(false)} title="High Priority Parcel Action" size="lg"> <div className="space-y-4"> <div className="p-3 bg-yellow-50 border-l-4 border-yellow-400"> <div className="flex items-center"> <AlertTriangle className="h-5 w-5 text-yellow-500 mr-2" /> <p className="text-sm text-yellow-700">This action is for a parcel from a high-priority client (<strong>{clients.find(c=>c.id === parcelForHighPriorityProcessing?.client_id)?.name}</strong>) and is currently marked <strong>MISSING</strong>.</p> </div> </div> <p className="font-semibold text-gray-700">{highPriorityQuestions[highPriorityChecklistStep]}</p> {currentHighPriorityAlert && (<p className="text-sm text-red-600 p-2 bg-red-50 border border-red-200 rounded">{currentHighPriorityAlert}</p>)} <div className="flex justify-end space-x-3 pt-2"> <Button variant="danger" onClick={handleHighPriorityChecklistNo}>No</Button> <Button variant="primary" onClick={handleHighPriorityChecklistNext}>{highPriorityChecklistStep === highPriorityQuestions.length - 1 ? 'Confirm Action' : 'Yes, Next'}</Button> </div> </div> </Modal>
    </div>
  );
};

export default MissingParcelsWorkflow;